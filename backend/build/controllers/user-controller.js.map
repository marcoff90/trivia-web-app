{"version":3,"file":"user-controller.js","names":["storeUser","req","res","next","user","body","passwordRegex","constructor","Object","keys","length","ApiError","badRequest","username","email","password","match","UserService","isUserNameTaken","conflict","isEmailUsed","create","savedUser","json","createdUser","id","showLogin","login","loggedUser","token","unauthorized","forbidden","avatar","totalScore","forgottenPassword","userEmail","findByEmail","resetPassword","query","timeNow","Date","now","bcrypt","compareSync","activateAccount","confirmationToken","findByConfirmationToken","console","log","notFound","generateNewConfirmationToken","newToken","confirmAccount","active","welcomeUser","identifyUserByResetToken","findByPasswordToken"],"sources":["../../src/controllers/user-controller.js"],"sourcesContent":["import ApiError from \"../error/api-error\";\nimport UserService from \"../services/user-service\";\nimport authentication from \"../utils/token-generator\";\nimport bcrypt from \"bcrypt\";\n\nconst storeUser = async (req, res, next) => {\n  let user = req.body;\n  let passwordRegex = \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$\";\n\n  if (req.body.constructor === Object && Object.keys(req.body).length === 0) {\n    next(ApiError.badRequest(\"User must be defined!\"));\n\n  } else if (!user.username) {\n    next(ApiError.badRequest('Username must be defined!'));\n\n  } else if (!user.email) {\n    next(ApiError.badRequest('Email must be defined!'));\n\n  } else if (!user.password) {\n    next(ApiError.badRequest('Password must be defined!'));\n\n  } else if (!user.password.match(passwordRegex)) {\n    next(ApiError.badRequest(\"Password doesn't match requirements!\"));\n\n  } else if (await UserService.isUserNameTaken(user.username)) {\n    next(ApiError.conflict('Username already taken!'));\n\n  } else if (await UserService.isEmailUsed(user.email)) {\n    next(ApiError.conflict('Email is already used!'));\n\n  } else if (user.username.length < 5) {\n    next(ApiError.badRequest('Username must be at least 5 characters!'))\n\n  } else {\n    let savedUser = await UserService.create(user);\n    res.json({\n      createdUser: {\n        id: savedUser.id,\n        username: savedUser.username\n      }\n    });\n  }\n};\n\nconst showLogin = async (req, res, next) => {\n  let user = req.body;\n\n  if (!user.username) {\n    next(ApiError.badRequest('Username must be defined!'));\n\n  } else if (!user.password) {\n    next(ApiError.badRequest('Password must be defined!'));\n\n  } else {\n    let loggedUser = await UserService.login(user);\n\n    let token = loggedUser !== null ? await authentication(loggedUser) : null;\n\n    if (!token) {\n      next(ApiError.unauthorized(\"At least one of the fields doesn't match!\"));\n\n    } else {\n      if (!loggedUser['active']) {\n        next(ApiError.forbidden('Confirm the account through email confirmation!'));\n\n      } else {\n\n      res.json({\n        token: token,\n        username: loggedUser['username'],\n        avatar: loggedUser['avatar'],\n        totalScore: loggedUser['totalScore']\n      });\n    }\n  }\n}\n}\n;\n\nconst forgottenPassword = async (req, res, next) => {\n  let userEmail = req.body.email;\n  let user;\n\n  if (!userEmail) {\n    next(ApiError.badRequest('Email must be defined!'));\n  } else {\n    user = await UserService.findByEmail(userEmail)\n  }\n\n  if (!user) {\n    next(ApiError.badRequest(\"Email doesn't match any user\"));\n\n  } else {\n    await UserService.forgottenPassword(userEmail);\n    res.json('Email with reset link sent');\n  }\n};\n\nconst resetPassword = async (req, res, next) => {\n  let userEmail = req.body['email'];\n  let password = req.body['password'];\n  let passwordRegex = \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$\";\n  let user;\n  let token = req.query['token'];\n  let timeNow = Date.now() / 1000;\n\n  if (!token) {\n    next(ApiError.badRequest('Reset password token must be provided!'));\n\n  } else if (!userEmail) {\n    next(ApiError.badRequest('Email must be defined!'));\n\n  } else if (!password) {\n    next(ApiError.badRequest('Password must be defined!'));\n\n  } else {\n    user = await UserService.findByEmail(userEmail);\n  }\n\n  if (!user) {\n    next(ApiError.badRequest(\"User not found\"));\n\n  } else if (user['forgottenPasswordToken'] !== token) {\n    next(ApiError.badRequest(\"Reset token not associated with email address!\"));\n\n  } else if (bcrypt.compareSync(password, user['password'])) {\n    next(ApiError.badRequest(\"Password cannot be same as it was!\"));\n\n  } else if (!password.match(passwordRegex)) {\n    next(ApiError.badRequest(\"Password doesn't match requirements\"));\n\n  } else if (timeNow > user['forgottenPasswordTokenExpiration']) {\n    next(ApiError.badRequest('Token expired!'));\n\n  } else {\n    await UserService.resetPassword(userEmail, password);\n    res.json('Password changed successfully!');\n  }\n};\n\nconst activateAccount = async (req, res, next) => {\n  let confirmationToken = req.query['confirmation'];\n  let avatar = req.body['avatar'];\n  let timeNow = Date.now() / 1000;\n\n  if (!confirmationToken) {\n    next(ApiError.badRequest('Confirmation token must be provided!'));\n  }\n\n  if (!avatar) {\n    next(ApiError.badRequest('Avatar must be provided!'));\n\n  } else {\n    let user = await UserService.findByConfirmationToken(confirmationToken);\n    console.log(user);\n\n    if (!user) {\n      next(ApiError.notFound('Token not assigned to user!'));\n\n    } else if (timeNow > user['confirmationTokenExpiration']) {\n      let newToken = await UserService.generateNewConfirmationToken(\n          confirmationToken);\n      if (newToken) {\n        res.json('Token expired! Check email for new one!');\n      }\n\n    } else {\n      let user = await UserService.confirmAccount(confirmationToken, avatar);\n      let token = await authentication(user);\n      res.json({\n        username: user['username'],\n        active: user['active'],\n        avatar: user['avatar'],\n        totalScore: user['totalScore'],\n        token: token\n      });\n    }\n  }\n};\n\nconst welcomeUser = async (req, res, next) => {\n  let confirmationToken = req.query['confirmation'];\n  if (!confirmationToken) {\n    next(ApiError.badRequest('Confirmation token must be provided!'));\n\n  } else {\n    let user = await UserService.findByConfirmationToken(confirmationToken);\n\n    if (!user) {\n      next(ApiError.notFound('Token not assigned to user!'));\n    } else {\n      res.json({\n        username: user['username']\n      })\n    }\n  }\n};\n\nconst identifyUserByResetToken = async (req, res, next) => {\n  let token = req.query['token'];\n  let user;\n  if (!token) {\n    next(ApiError.badRequest('Token must be provided!'));\n\n  } else {\n    user = await UserService.findByPasswordToken(token);\n\n    if (!user) {\n      next(ApiError.notFound('Token not assigned to user!'));\n\n    } else {\n      res.json('ok');\n    }\n  }\n};\n\nexport default {\n  storeUser,\n  showLogin,\n  forgottenPassword,\n  resetPassword,\n  activateAccount,\n  welcomeUser,\n  identifyUserByResetToken\n};\n"],"mappings":"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"}