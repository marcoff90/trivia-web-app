{"version":3,"file":"duel-controller.js","names":["storeDuel","req","res","next","user","DuelService","id","duel","json","isSecondPlayerIn","duelId","params","player","isDuelReady","ApiError","notFound","unauthorized","badRequest","areQuestionsChosen","findByIdUnfinished","DuelQuestionsService","findByDuelId","duelQuestions","length","UserService","getUsersAvatar","playerOneAvatar","playerTwoAvatar","setCategories","categories","body","categoriesSet","Set","size","getQuestion","questionsCount","query","isPlayerInDuel","forbidden","question","checkAnswer","questionId","guessAnswerId","AnsweredQuestionsService","findByDuelIdPlayerIdAndQuestionId","answeredQuestion","parseInt","e","isQuestionInDuel","result","showRoundScore","getRoundResults","duelWithResults"],"sources":["../../src/controllers/duel-controller.js"],"sourcesContent":["import DuelService from \"../services/duel-service\";\nimport ApiError from \"../error/api-error\";\nimport DuelQuestionsService from \"../services/duel-questions-service\";\nimport AnsweredQuestionsService from \"../services/answered-questions-service\";\nimport UserService from \"../services/user-service\";\n\nconst storeDuel = async (req, res, next) => {\n  let user = req.user;\n\n  let duel = await DuelService.storeDuel(user.id);\n\n  if (duel) {\n    res.json(duel);\n  }\n  next();\n};\n\nconst isSecondPlayerIn = async (req, res, next) => {\n  let duelId = req.params.id;\n  let player = req.user;\n  let isDuelReady = await DuelService.isSecondPlayerIn(duelId);\n\n  if (!isDuelReady) {\n    next(ApiError.notFound('Duel not found!'))\n\n  } else if (isDuelReady['playerOneId'] !== player.id) {\n    next(ApiError.unauthorized('Only players in duel can see the game'));\n\n  } else if (isDuelReady['playerTwoId'] == null) {\n    next(ApiError.badRequest('Waiting for second player'));\n\n  } else {\n    res.json(isDuelReady);\n  }\n};\n\nconst areQuestionsChosen = async (req, res, next) => {\n  let duelId = req.params.id;\n  let player = req.user;\n  let duel = await DuelService.findByIdUnfinished(duelId);\n  let duelQuestions = await DuelQuestionsService.findByDuelId(duelId);\n\n  if (!duel) {\n    next(ApiError.notFound('Duel not found!'));\n\n  } else if (duel['playerTwoId'] !== player.id) {\n    next(ApiError.unauthorized('Only players in duel can see the game'));\n\n  } else if (duelQuestions.length === 0) {\n    next(ApiError.notFound('Questions have not been assigned yet'));\n\n  } else {\n    let playerOneAvatar = await UserService.getUsersAvatar(duel['playerOneId']);\n    let playerTwoAvatar = await UserService.getUsersAvatar(duel['playerTwoId']);\n    res.json({\n      duel,\n      playerOneAvatar,\n      playerTwoAvatar\n    });\n  }\n};\n\nconst setCategories = async (req, res, next) => {\n  let duelId = req.params.id;\n  let player = req.user;\n  let categories = req.body['categories'];\n  let duel = await DuelService.findByIdUnfinished(duelId);\n\n  if (!categories) {\n    next(ApiError.badRequest('Categories must be provided!'));\n\n  } else if (categories.length !== 5) {\n    next(ApiError.badRequest('Five categories must be chosen!'));\n  }\n\n  let categoriesSet = new Set(categories);\n\n  if (categoriesSet.size !== 5) {\n    next(ApiError.badRequest('Categories must be unique!'));\n\n  } else if (!duel) {\n    next(ApiError.notFound('Duel not found!'));\n\n  } else if (duel['playerOneId'] !== player.id) {\n    next(ApiError.badRequest('Only host player can set categories!'));\n\n  } else {\n    await DuelService.setCategories(duelId, categories);\n    let playerOneAvatar = await UserService.getUsersAvatar(duel['playerOneId']);\n    let playerTwoAvatar = await UserService.getUsersAvatar(duel['playerTwoId']);\n    res.json({\n      duel,\n      playerOneAvatar,\n      playerTwoAvatar\n    });\n  }\n};\n\nconst getQuestion = async (req, res, next) => {\n  let duelId = req.params.id;\n  let player = req.user;\n  let duel = await DuelService.findByIdUnfinished(duelId);\n  let questionsCount = req.query['count']\n\n  if (!duel) {\n    next(ApiError.notFound('Duel not found!'));\n\n  } else if (!duel['playerOneId'] && !duel['playerTwoId']) {\n    next(ApiError.badRequest('Two players must play the game!'));\n\n  } else if (!DuelService.isPlayerInDuel(player.id, duel)) {\n    next(ApiError.forbidden('Player not part of this duel!'))\n\n  } else if (!questionsCount) {\n    next(ApiError.badRequest('Questions count must be provided!'));\n\n  } else if (questionsCount > 1) {\n    next(ApiError.badRequest('Questions count must be equal to 1!'));\n\n  } else {\n    let question = await DuelService.getQuestion(duelId, player.id);\n\n    if (!question) {\n      next(ApiError.notFound(\"Questions haven't been assigned yet\"))\n    } else {\n      res.json(question);\n    }\n  }\n};\n\nconst checkAnswer = async (req, res, next) => {\n  let duelId = req.params.id;\n  let questionId = req.params.questionId;\n  let guessAnswerId = req.query['guess'];\n  let player = req.user;\n  let answeredQuestion = await AnsweredQuestionsService.findByDuelIdPlayerIdAndQuestionId(\n      duelId, player.id, questionId);\n\n  try {\n    guessAnswerId = parseInt(guessAnswerId);\n  } catch (e) {\n    next(ApiError.badRequest('Guess must be a number!'))\n  }\n\n  let isQuestionInDuel = await DuelQuestionsService.isQuestionInDuel(questionId,\n      duelId);\n\n  let duel = await DuelService.findByIdUnfinished(duelId);\n\n  if (!duel) {\n    next(ApiError.notFound('Duel not found!'));\n\n  } else if (!isQuestionInDuel) {\n    next(ApiError.badRequest('Question not part of duel!'))\n\n  } else if (!DuelService.isPlayerInDuel(player.id, duel)) {\n    next(ApiError.forbidden('Player not part of this duel!'))\n\n  } else if (!guessAnswerId) {\n    next(ApiError.badRequest('Guess must be provided!'));\n\n  } else if (answeredQuestion) {\n    next(ApiError.badRequest(\"You've already answered this question!\"));\n\n  } else {\n    let result = await DuelService.checkAnswer(duelId, player.id, guessAnswerId,\n        questionId);\n    res.json(result);\n  }\n};\n\nconst showRoundScore = async (req, res, next) => {\n  let duelId = req.params.id;\n  let player = req.user;\n  let duel = await DuelService.findByIdUnfinished(duelId);\n  if (!duel) {\n    next(ApiError.notFound('Duel not found!'));\n  } else {\n    let duelWithResults = await DuelService.getRoundResults(duelId, player.id);\n\n    if (!duelWithResults) {\n      next(ApiError.badRequest('Wait a moment for other player to finish this round too ☺️'));\n\n    } else {\n      let playerOneAvatar = await UserService.getUsersAvatar(\n          duel['playerOneId']);\n      let playerTwoAvatar = await UserService.getUsersAvatar(\n          duel['playerTwoId']);\n      res.json({\n        duelWithResults,\n        playerOneAvatar,\n        playerTwoAvatar\n      });\n    }\n  }\n};\n\nexport default {\n  storeDuel,\n  isSecondPlayerIn,\n  setCategories,\n  getQuestion,\n  checkAnswer,\n  showRoundScore,\n  areQuestionsChosen\n};\n"],"mappings":"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"}