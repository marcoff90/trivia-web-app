{"version":3,"file":"db-relationships.js","names":["createRelationships","Category","hasMany","Question","as","foreignKey","belongsTo","PossibleAnswer","getPossibleAnswers","getDataValue","belongsToMany","Duel","through","DuelQuestions","getQuestions","User","setPlayerOne","playerOne","setDataValue","setPlayerTwo","playerTwo","DuelRoundScore","getDuelRoundScores","sequelize","sync","then","res","console","log"],"sources":["../../src/config/db-relationships.js"],"sourcesContent":["import sequelize from \"./database\";\nimport Question from \"../models/question\";\nimport Category from \"../models/category\";\nimport PossibleAnswer from \"../models/possible-answer\";\nimport DuelQuestions from \"../models/duel-questions\";\nimport Duel from \"../models/duel\";\nimport User from \"../models/user\";\nimport DuelRoundScore from \"../models/duel-round-score\";\n\nconst createRelationships = () => {\n\n  Category.hasMany(Question, {\n    as: 'categoryQuestions',\n    foreignKey: 'category_id'\n  });\n\n  Question.belongsTo(Category, {\n    as: 'categoryQuestion',\n    foreignKey: 'category_id'\n  });\n\n  Question.hasMany(PossibleAnswer, {\n    as: 'possibleAnswers',\n    foreignKey: 'question_id',\n    getPossibleAnswers() {\n      return this.getDataValue('possibleAnswers');\n    }\n  });\n\n  PossibleAnswer.belongsTo(Question, {\n    as: 'possibleAnswer',\n    foreignKey: 'question_id',\n  });\n\n  Question.belongsToMany(Duel, {\n    through: DuelQuestions\n  });\n\n  Duel.belongsToMany(Question, {\n    through: DuelQuestions,\n    getQuestions() {\n      return this.getDataValue;\n    }\n  });\n\n  Duel.belongsTo(User, {\n    as: 'playerOne',\n    foreignKey: 'playerOneId',\n    setPlayerOne(playerOne) {\n      this.setDataValue('playerOne', playerOne);\n    }\n  });\n\n  Duel.belongsTo(User, {\n    as: 'playerTwo',\n    foreignKey: 'playerTwoId',\n    setPlayerTwo(playerTwo) {\n      this.setDataValue('playerTwo', playerTwo);\n    }\n  });\n\n  Duel.hasMany(DuelRoundScore, {\n    as: 'duelRoundScores',\n    foreignKey: 'duel_id',\n    getDuelRoundScores() {\n      return this.getDataValue('duelRoundScores');\n    }\n  });\n\n  DuelRoundScore.belongsTo(Duel, {\n    as: 'duelRoundScore',\n    foreignKey: 'duel_id'\n  });\n\n  sequelize.sync()\n  .then(res => {\n    console.log(res);\n  })\n};\n\nexport default createRelationships;\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;EAEhCC,qBAASC,OAAT,CAAiBC,oBAAjB,EAA2B;IACzBC,EAAE,EAAE,mBADqB;IAEzBC,UAAU,EAAE;EAFa,CAA3B;;EAKAF,qBAASG,SAAT,CAAmBL,oBAAnB,EAA6B;IAC3BG,EAAE,EAAE,kBADuB;IAE3BC,UAAU,EAAE;EAFe,CAA7B;;EAKAF,qBAASD,OAAT,CAAiBK,0BAAjB,EAAiC;IAC/BH,EAAE,EAAE,iBAD2B;IAE/BC,UAAU,EAAE,aAFmB;IAG/BG,kBAH+B,gCAGV;MACnB,OAAO,KAAKC,YAAL,CAAkB,iBAAlB,CAAP;IACD;EAL8B,CAAjC;;EAQAF,2BAAeD,SAAf,CAAyBH,oBAAzB,EAAmC;IACjCC,EAAE,EAAE,gBAD6B;IAEjCC,UAAU,EAAE;EAFqB,CAAnC;;EAKAF,qBAASO,aAAT,CAAuBC,gBAAvB,EAA6B;IAC3BC,OAAO,EAAEC;EADkB,CAA7B;;EAIAF,iBAAKD,aAAL,CAAmBP,oBAAnB,EAA6B;IAC3BS,OAAO,EAAEC,yBADkB;IAE3BC,YAF2B,0BAEZ;MACb,OAAO,KAAKL,YAAZ;IACD;EAJ0B,CAA7B;;EAOAE,iBAAKL,SAAL,CAAeS,gBAAf,EAAqB;IACnBX,EAAE,EAAE,WADe;IAEnBC,UAAU,EAAE,aAFO;IAGnBW,YAHmB,wBAGNC,SAHM,EAGK;MACtB,KAAKC,YAAL,CAAkB,WAAlB,EAA+BD,SAA/B;IACD;EALkB,CAArB;;EAQAN,iBAAKL,SAAL,CAAeS,gBAAf,EAAqB;IACnBX,EAAE,EAAE,WADe;IAEnBC,UAAU,EAAE,aAFO;IAGnBc,YAHmB,wBAGNC,SAHM,EAGK;MACtB,KAAKF,YAAL,CAAkB,WAAlB,EAA+BE,SAA/B;IACD;EALkB,CAArB;;EAQAT,iBAAKT,OAAL,CAAamB,0BAAb,EAA6B;IAC3BjB,EAAE,EAAE,iBADuB;IAE3BC,UAAU,EAAE,SAFe;IAG3BiB,kBAH2B,gCAGN;MACnB,OAAO,KAAKb,YAAL,CAAkB,iBAAlB,CAAP;IACD;EAL0B,CAA7B;;EAQAY,2BAAef,SAAf,CAAyBK,gBAAzB,EAA+B;IAC7BP,EAAE,EAAE,gBADyB;IAE7BC,UAAU,EAAE;EAFiB,CAA/B;;EAKAkB,qBAAUC,IAAV,GACCC,IADD,CACM,UAAAC,GAAG,EAAI;IACXC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACD,CAHD;AAID,CArED;;eAuEe1B,mB"}